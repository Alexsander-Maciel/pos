{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/pos/sistema/frontend/src/pages/LoginPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport LoginForm from '../components/LoginForm'; // Ensure correct path\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginPage = () => {\n  _s();\n  const [error, setError] = useState(null);\n  const handleLogin = async (username, password) => {\n    try {\n      // Replace with your login API logic\n      if (username === 'admin' && password === 'password') {\n        console.log('Login successful');\n        // Redirect to main page or perform other actions\n      } else {\n        throw new Error('Invalid credentials');\n      }\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(LoginForm, {\n      onLogin: handleLogin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n};\n_s(LoginPage, \"A8i/78Fx3FIozbyR2zwnz0NK35o=\");\n_c = LoginPage;\nexport default LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useState","LoginForm","jsxDEV","_jsxDEV","LoginPage","_s","error","setError","handleLogin","username","password","console","log","Error","err","message","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","onLogin","_c","$RefreshReg$"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/pos/sistema/frontend/src/pages/LoginPage.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport LoginForm from '../components/LoginForm'; // Ensure correct path\n\nconst LoginPage: React.FC = () => {\n    const [error, setError] = useState<string | null>(null);\n\n    const handleLogin = async (username: string, password: string) => {\n        try {\n            // Replace with your login API logic\n            if (username === 'admin' && password === 'password') {\n                console.log('Login successful');\n                // Redirect to main page or perform other actions\n            } else {\n                throw new Error('Invalid credentials');\n            }\n        } catch (err) {\n            setError(err.message);\n        }\n    };\n\n    return (\n        <div>\n            <h2>Login</h2>\n            {error && <p style={{ color: 'red' }}>{error}</p>}\n            <LoginForm onLogin={handleLogin} />\n        </div>\n    );\n};\n\nexport default LoginPage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,SAAS,MAAM,yBAAyB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,SAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAgB,IAAI,CAAC;EAEvD,MAAMQ,WAAW,GAAG,MAAAA,CAAOC,QAAgB,EAAEC,QAAgB,KAAK;IAC9D,IAAI;MACA;MACA,IAAID,QAAQ,KAAK,OAAO,IAAIC,QAAQ,KAAK,UAAU,EAAE;QACjDC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;QAC/B;MACJ,CAAC,MAAM;QACH,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;MAC1C;IACJ,CAAC,CAAC,OAAOC,GAAG,EAAE;MACVP,QAAQ,CAACO,GAAG,CAACC,OAAO,CAAC;IACzB;EACJ,CAAC;EAED,oBACIZ,OAAA;IAAAa,QAAA,gBACIb,OAAA;MAAAa,QAAA,EAAI;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACbd,KAAK,iBAAIH,OAAA;MAAGkB,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAM,CAAE;MAAAN,QAAA,EAAEV;IAAK;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjDjB,OAAA,CAACF,SAAS;MAACsB,OAAO,EAAEf;IAAY;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClC,CAAC;AAEd,CAAC;AAACf,EAAA,CAxBID,SAAmB;AAAAoB,EAAA,GAAnBpB,SAAmB;AA0BzB,eAAeA,SAAS;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}